{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HDML'\ndebug                     = CND.get_logger 'debug',     badge\n# warn                      = CND.get_logger 'warn',      badge\n# info                      = CND.get_logger 'info',      badge\n# urge                      = CND.get_logger 'urge',      badge\n# help                      = CND.get_logger 'help',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# echo                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\nGUY                       = require 'guy'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.open\":                ( x ) -> @isa.nonempty_text x.open\n  \"@isa.nonempty_text x.selfclose\":           ( x ) -> @isa.nonempty_text x.selfclose\n  \"@isa.nonempty_text x.close\":               ( x ) -> @isa.nonempty_text x.close\n  \"@isa.boolean x.use_compact_tags\":          ( x ) -> @isa.boolean x.use_compact_tags\n  \"@isa.boolean x.strict_compact_tags\":       ( x ) -> @isa.boolean x.strict_compact_tags\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Hdml\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    #.......................................................................................................\n    defaults:\n      constructor_cfg:\n        open:                 '<'\n        selfclose:            '^'\n        close:                '>'\n        use_compact_tags:     true\n        strict_compact_tags:  true\n    #.......................................................................................................\n    compact_tagname_re        = ///\n      (?<prefix>[^\\s.:#]+(?=:)) |\n      (?<id>(?<=#)[^\\s.:#]+) |\n      (?<class>(?<=\\.)[^\\s.:#]+) |\n      (?<tag>[^\\s.:#]+)\n      ///ug\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    clasz = @constructor\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg cfg = { clasz.C.defaults.constructor_cfg..., cfg..., }\n    @cfg  = GUY.lft.freeze cfg\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_text: ( text ) ->\n    @types.validate.text text\n    R = text\n    R = R.replace /&/g,   '&amp;'\n    R = R.replace /</g,   '&lt;'\n    R = R.replace />/g,   '&gt;'\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_atr_text: ( text ) ->\n    R = @escape_text text\n    R = R.replace /'/g,   '&#39;'\n    R = R.replace /\\n/g,  '&#10;'\n    return \"'#{R}'\"\n\n  #---------------------------------------------------------------------------------------------------------\n  create_tag: ( sigil, tag, atrs = null ) ->\n    @types.validate.text tag\n    return switch sigil\n      when @cfg.open      then @_create_opening_or_selfclosing_tag false, tag, atrs\n      when @cfg.selfclose then @_create_opening_or_selfclosing_tag true,  tag, atrs\n      when @cfg.close     then @create_closing_tag tag\n    throw new Error \"^45487^ illegal sigil #{rpr sigil}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  create_opening_tag:     ( tag, atrs = null ) -> @_create_opening_or_selfclosing_tag false, tag, atrs\n  create_selfclosing_tag: ( tag, atrs = null ) -> @_create_opening_or_selfclosing_tag true,  tag, atrs\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_opening_or_selfclosing_tag: ( is_selfclosing, tag, atrs = null ) ->\n    ### TAINT validate or escape tag, atr keys ###\n    s     = if is_selfclosing then '/' else ''\n    tag_  = tag\n    if @cfg.use_compact_tags and /[:\\.#]/.test tag\n      d   = @parse_compact_tagname tag\n      if d.prefix? then tag = \"#{d.prefix}:#{d.tag}\"\n      else              tag = d.tag\n      if d.id?\n        throw new Error \"^HDML@1^ cannot give two values for ID, got #{d.id}, #{atrs.id}\" if atrs?.id?\n        atrs       ?= {}\n        atrs.id     = d.id\n      if d.class?\n        atrs       ?= {}\n        atrs.class  = @_join_classes atrs.class, d.class\n    ### TAINT code duplication ###\n    if ( not tag? ) or ( tag is '' )\n      throw new Error \"^HDML@2^ illegal compact tag syntax in #{rpr tag_}\"\n    return \"<#{tag}#{s}>\" if ( not atrs? ) or ( ( Object.keys atrs ).length is 0 )\n    atrs_txt = ( \"#{k}=#{@escape_atr_text v}\" for k, v of atrs ).join ' '\n    return \"<#{tag} #{atrs_txt}#{s}>\"\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT validate or escape tag ###\n  ### TAINT should be legal to pass in a compact tag ###\n  create_closing_tag: ( tag ) -> \"</#{tag}>\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _join_classes: ( atrs_class, d_class ) ->\n    atrs_class ?= []\n    switch ( type = @types.type_of atrs_class )\n      when 'text' then atrs_class = atrs_class.split /\\s/\n      when 'list' then null\n    return [ ( new Set [ atrs_class, d_class, ].flat() )... ].join ' '\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_compact_tagname: ( compact_tagname ) ->\n    ### TAINT name -> tag ###\n    R = {}\n    for { groups, } from compact_tagname.matchAll compact_tagname_re\n      for k, v of groups\n        continue if ( not v? ) or ( v is '' )\n        if k is 'class'\n          ( R.class ?= [] ).push v\n        else\n          if ( target = R[ k ] )?\n            throw new Error \"^HDML@3^ found duplicate values for #{rpr k}: #{rpr target}, #{rpr v}\"\n          R[ k ] = v\n    if @cfg.strict_compact_tags\n      if ( not R.tag? ) or ( R.tag is '' )\n        throw new Error \"^HDML@4^ illegal compact tag syntax in #{rpr compact_tagname}\"\n    return R\n\n\n### NOTE default instance: ###\n@HDML = new @Hdml()\n\n\n\n"
  ]
}